=pod

=head1 NAME

Starch::Store::Amazon::DynamoDB - Session storage backend using Amazon::DynamoDB.

=head1 SYNOPSIS

    my $starch = Starch->new(
        store => {
            class => '::Amazon::DynamoDB',
            ddb => {
                implementation => 'Amazon::DynamoDB::LWP',
                version        => '20120810',
                
                access_key   => 'access_key',
                secret_key   => 'secret_key',
                # or you specify to use an IAM role
                use_iam_role => 1,
                
                host  => 'dynamodb.us-east-1.amazonaws.com',
                scope => 'us-east-1/dynamodb/aws4_request',
                ssl   => 1,
            },
        },
    );

=head1 DESCRIPTION

This Starch store uses L<Amazon::DynamoDB> to set and get session data.

=head1 REQUIRED ARGUMENTS

=head2 ddb

This must be set to either hash ref arguments for L<Amazon::DynamoDB> or a
pre-built object (often retrieved using a
L<method proxy|Starch::Manual/METHOD PROXIES>).

When configuring Starch from static configuration files using a
L<method proxy|Starch::Manual/METHOD PROXIES>
is a good way to link your existing L<Amazon::DynamoDB> object
constructor in with Starch so that starch doesn't build its own.

=head1 OPTIONAL ARGUMENTS

=head2 consistent_read

When C<true> this sets the C<ConsistentRead> flag when calling
L<get_item> on the L</ddb>.  Defaults to C<true>.

=head2 serializer

A L<Data::Serializer::Raw> for serializing the session data for storage
in the L</data_field>.  Can be specified as string containing the
serializer name, a hashref of Data::Serializer::Raw arguments, or as a
pre-created Data::Serializer::Raw object.  Defaults to C<JSON>.

Consider using the C<JSON::XS> or C<Sereal> serializers for speed.

=head2 table

The DynamoDB table name where sessions are stored. Defaults to C<sessions>.

=head2 key_field

The field in the L</table> where the session ID is stored.
Defaults to C<key>.

=head2 expiration_field

The field in the L</table> which will hold the epoch
time when the session should be expired.  Defaults to C<expiration>.

=head2 data_field

The field in the L</table> which will hold the
session data.  Defaults to C<data>.

=head1 ATTRIBUTES

=head1 reap_scan_filter

Returns the data structure used for the C<ScanFilter> argument when
scanning for session to reap.  This ScanFilter will find all sessions
which have an L</expiration_field> less than the current time.

=head1 METHODS

=head2 reap_expired

=head2 create_table_args

Returns the appropriate arguments to use for calling C<create_table>
on the L</ddb> object.  By default it will look like this:

    {
        TableName => 'sessions',
        ReadCapacityUnits => 10,
        WriteCapacityUnits => 10,
        AttributeDefinitions => { key => 'S' },
        KeySchema => [ 'key' ],
    }

Any arguments you pass will override those in the returned arguments.

=head2 create_table

Creates the L</table> by passing any arguments to L</create_table_args>
and issueing the C<create_table> command on the L</ddb> object.

=head2 set

Set L<Starch::Store/set>.

=head2 get

Set L<Starch::Store/get>.

=head2 remove

Set L<Starch::Store/remove>.

=head1 AUTHOR

Aran Clary Deltac <bluefeetE<64>gmail.com>

=head1 ACKNOWLEDGEMENTS

Thanks to L<ZipRecruiter|https://www.ziprecruiter.com/>
for encouraging their employees to contribute back to the open
source ecosystem.  Without their dedication to quality software
development this distribution would not exist.

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
